=== PyQt5 简易播放器 v1.2
# update: 
# 1. 搜索框动态搜索
# 2. 命名规范：
#   1. 函数 setup_xxx 指对象初始化时的配置（仅调用一次）
#   2. 函数 on_aaaBbb 表示 aaa 的事件 bbb 触发时调用的处理函数
#   3. 组件 aaa_bbb 表示
#

import copy
import os
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QFileDialog, QLabel, QPushButton, \
    QTableWidget, QTableWidgetItem, QSizePolicy, QLineEdit
from PyQt5.QtMultimedia import QMediaPlayer,QMediaContent
from PyQt5.QtCore import QUrl, Qt


class MusicPlayer(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Music Player')
        self.setup_ui()
        self.setup_player()
    def setup_ui(self):
        # 选中歌曲的标签，导入文件按钮，导入文件列表按钮，播放按钮，暂停按钮，上一首/下一首按钮
        self.song_label = QLabel('No song is playing')
        self.song_label.setFixedWidth(150)
        self.importfiles_button = QPushButton('import file list')
        self.importfiles_button.clicked.connect(self.import_files)
        self.play_button = QPushButton('play')
        self.play_button.clicked.connect(self.on_play)
        self.stop_button = QPushButton('stop')
        self.stop_button.clicked.connect(self.on_stop)
        self.pre_button = QPushButton('pre song')
        self.pre_button.clicked.connect(self.on_pre)
        self.next_button = QPushButton('next song')
        self.next_button.clicked.connect(self.on_next)

        # 设置并添加样式（纵向排列）
        layout = QVBoxLayout()
        layout.addWidget(self.song_label)
        layout.addWidget(self.importfiles_button)
        layout.addWidget(self.play_button)
        layout.addWidget(self.stop_button)
        layout.addWidget(self.pre_button)
        layout.addWidget(self.next_button)

        # 音乐搜索框（过滤框），音乐表格
        self.filter_text = QLineEdit()
        self.filter_text.textChanged.connect(self.on_filtertextchange)
        self.filter_text.returnPressed.connect(self.on_filtertextenter)
        self.music_table = QTableWidget()
        self.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Expanding)
        self.music_table.setColumnCount(2)
        self.music_table.setColumnWidth(0,200)
        self.music_table.setColumnWidth(1,150)
        self.music_table.setFixedWidth(410)
        self.music_table.setHorizontalHeaderLabels(['音乐名称','路径'])
        self.music_table.itemClicked.connect(self.on_tableitemClicked)
        self.music_table.itemDoubleClicked.connect(self.on_tableitemDoubleclick)

        song_layout = QVBoxLayout()
        song_layout.addWidget(self.filter_text)
        song_layout.addWidget(self.music_table)


        # 主样式——用于整合上述样式和组件
        main_layout = QHBoxLayout()
        main_layout.addLayout(layout)
        main_layout.addLayout(song_layout)

        self.setLayout(main_layout)
    def setup_player(self):
        self.files = []
        self.files_filtered = []
        self.playingfileindex = 0
        self.player = QMediaPlayer()

        self.defaut_path='E:/LX/app/魔音Morin/Cache/Song'
        self.add_files([f'{self.defaut_path}/{basename}' for basename in os.listdir(self.defaut_path) if basename.endswith('.mp3')])
        self.switch_file(0)

    def add_files(self, files):
        self.files += files
        length = len(self.files)
        self.music_table.setRowCount(length)
        self.files_filtered = self.files
        self.update_table()

    # 导入多个音乐文件
    def import_files(self):
        # file_path, _ = QFileDialog.getOpenFileName(self, "Open Music File", self.defaut_path, 'file(*.mp3;*.wav)')
        file_list, _ = QFileDialog.getOpenFileNames(self, "Open Music File", self.defaut_path, 'file(*.mp3;*.wav)')
        self.add_files(file_list)

    # 更新音乐表格的显示
    def update_table(self):
        files = self.files_filtered
        self.music_table.setRowCount(len(files))
        for i in range(len(files)):
            file = files[i]
            dirname, basename = os.path.split(file)
            item0 = QTableWidgetItem(basename)
            item1 = QTableWidgetItem(dirname)
            # 表格中的单元格设为只读
            item0.setFlags(item0.flags() & ~Qt.ItemIsEditable)
            item1.setFlags(item1.flags() & ~Qt.ItemIsEditable)
            self.music_table.setItem(i, 0, item0)
            self.music_table.setItem(i, 1, item1)
        self.switch_file(0)

    # 更改正在播放或即将播放的歌曲
    def switch_file(self,index):
        # self.player.setMedia(QMediaContent(QUrl.fromLocalFile(self.files[0])))
        self.playingfileindex=index


    # 播放或暂停音乐
    def on_play(self):
        # print(QMediaPlayer.StoppedState, QMediaPlayer.PlayingState, QMediaPlayer.PausedState)
        # print(self.playingfileindex,self.player.state())
        state = self.player.state()
        if state == QMediaPlayer.StoppedState:
            try:
                self.player.setMedia(QMediaContent(QUrl.fromLocalFile(self.files_filtered[self.playingfileindex])))
            except Exception as e:
                return
            self.player.play()
            self.play_button.setText('pause')
            _, file = os.path.split(self.files_filtered[self.playingfileindex])
            self.song_label.setText(file)
        elif state == QMediaPlayer.PausedState:
            self.player.play()
            self.play_button.setText('pause')
            _, file = os.path.split(self.files_filtered[self.playingfileindex])
            self.song_label.setText(file)
        else:
            self.player.pause()
            self.play_button.setText('play')

    # 停止播放
    def on_stop(self):
        self.player.stop()
        self.play_button.setText('play')

    # 播放上一首
    def on_pre(self):
        self.switch_file(self.playingfileindex - 1)
        self.on_play()

    # 播放下一首
    def on_next(self):
        self.switch_file(self.playingfileindex + 1)
        self.on_play()

    # 歌曲表格的单元格的单击
    def on_tableitemClicked(self,item):
        self.switch_file(item.row())

    # 歌曲表格的单元格的双击
    def on_tableitemDoubleclick(self,item):
        # print(item.row(),item.column())
        self.on_stop()
        self.switch_file(item.row())
        self.on_play()

    # 歌曲表格的单元格的回车 enter
    def on_tableitemDoubleclick(self):



    # 搜索框文本改变时，执行播放列表的搜索过滤
    def on_filtertextchange(self):
        text = self.filter_text.text()
        self.files_filtered = copy.copy(self.files)     # 此处必须浅拷贝？！

        if len(text) != 0:
            indexs = [i for i in range(len(self.files)) if self.files[i].find(text)!=-1]
            self.switch_file(0)

            for j,i in enumerate(indexs):
                self.files_filtered[j] = self.files[i]
            self.files_filtered = self.files_filtered[:len(indexs)]
        self.update_table()

    # 搜索框按下 enter 时，默认播放第一条已经过搜索过滤的歌曲
    def on_filtertextenter(self):
        self.on_stop()
        self.music_table.selectRow(self.playingfileindex)
        self.switch_file(0)
        self.on_play()

app=QApplication(sys.argv)

player=MusicPlayer()
player.show()

sys.exit(app.exec_())